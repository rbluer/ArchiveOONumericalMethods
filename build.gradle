/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to 
 * https://docs.gradle.org/7.3/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    
    // com.github.johnrengelman.shadow:
    alias(libs.plugins.shadow)
}
 
import java.text.SimpleDateFormat
import java.util.Date


apply plugin: 'java'
//apply plugin: 'java-library'



compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

println """

###################################################
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#

OO Numerical Methods - Build Details:
  Version:    ${project.version}
  Build Time: ${getCurrentTimestamp()}

Generated jar details:
  /ArchiveOONumericalMethods/build/libs/
    - ArchiveOONumericalMethods-${project.version}.jar
    - ArchiveOONumericalMethods-${project.version}-all.jar 
       : Non-executable, minimized fat-jar, with source.
    - ArchiveOONumericalMethods-${project.version}-javadoc.jar
    - ArchiveOONumericalMethods-${project.version}-source.jar

Updating gradle:
  Gradle versions: https://gradle.org/releases/
  A specific gradle version is tied to the version of Java that you are using for your project.
  Update: 
    > ./gradlew wrapper --gradle-version 7.x
  - Uppdates the gradle wrapper's version.  Nothing is installed yet.
  Then run any gradle command to apply the new version, which will download and update the environment:
  Run version: 
    > ./gradlew --version
  Then you can run a 'normal build' using the new gradle version: 
    > ./gradlew build
  
  Its important to upgrade one version at a time, since conflicts will be listed in the output
  for the next expected release. Skipping versions can also skip the info on how to keep the 
  build compatible and functional. Inspect the logs in the console for any warnings or deprecation notes.

  Other helpful gradle parameters: --version, --status, --stacktrace, --info, --debug, --scan
  
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
###################################################

"""


repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
	// implementation(libs.bundles.groovy)
	
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)


    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api(libs.commons.math3)

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    // implementation(libs.guava)
}



java {

	// Build the jars with their source code:
	withSourcesJar()
	
	//withJavadoc()
	//withJavadocJar()

		
	// Apply a specific Java toolchain to ease working on different environments.
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.named("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}


// Packages the generated javadocs in to it's own jar file:
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}



shadowJar {
	dependsOn( javadocJar )

	from sourceSets.main.allSource
	
	//copy generated javadocs into the -all.jar 
	//from javadoc.destinationDir into 'javadoc'
	
	minimize()
}


build.dependsOn(shadowJar)


gradle.afterProject { project ->
    if (project.state.failure) {
        println "Evaluation of $project FAILED"
    } else {
        println "Evaluation of $project succeeded"
    }
}


def getCurrentTimestamp() {

	SimpleDateFormat df = new SimpleDateFormat( "yyyy-MM-dd HH:mm:ss" );
	return df.format( new Date() );

}
